<?php


class Payment extends Model
{
    public $proposal_id;
    public $client_id;
    public $amount;
    public $user_id;
    public $payment_method;
    public $description;
    public $payment_processor_charge_id;
    public $reference;
    public $payment_date;

    //IMPORTANT: This model does not have a validate function because validation happens in the actual save function

    function __construct($parameters = null){
        $this->import_parameters();

        //set the proposal in the constructor so we can verify access
        $this->proposal = new proposal($this->proposal_id);

        parent::__construct($parameters);
    }

    function save($ignore_current_user = false)
    {
        //todo:look into $ignore_current_user. Can it be overriden by a user?
        $payment_method = current_user()->role != 'admin' ? get_config('payments.method') : 'manual';

        $proposal = $this->proposal;

        //make sure the amount is a float
        $this->amount = (float)$this->amount;

        //make sure there is a balance on the proposal and this payment does not exceed that balance
        if(!$proposal->valid_payment_amount($this->amount)){
            $this->set_error('amount', Language::get('errors.payment_invalid_amount'));
            return false;
        }

        //make sure the user is proposal owner and
        //make sure the amount is equal to the total (temporary until we enable multiple payments)
        if (!$this->is_valid($proposal, $ignore_current_user)) {
            $this->set_error('amount', Language::get('errors.payment_invalid'));
            return false;
        }

        //it's possible for the user id to be set manually (i.e. when recording a payment from an ipn notification
        if(!isset($this->user_id))
            $this->set('user_id', current_user()->id);


        $this->set_primary_details($proposal, $payment_method);

        if($payment_method != 'manual'){
            //charge the user
            $payment_model = ucfirst($payment_method) . 'Payment';
            $charge = new $payment_model();
            $charge->init($this->amount, $_POST, $proposal);
            $result = $charge->submit();
        }
        else{
            $result = 'Manual Payment';
        }


        if ($result != false && $payment_method != 'paypal') {
            //save the id for this payment, generated by the payment processor
            $this->set('payment_processor_charge_id', $result);

            if($payment_method != 'manual'){
                $this->send_payment_notification($proposal, $payment_method);
            }

            return $this->complete_payment($proposal, $payment_method);
        }
        else if ($payment_method == 'paypal'){
            return true;
        }
        else {
            $this->set_error('amount', $charge->errors('amount'));
            return false;
        }
    }

    function set_primary_details($proposal, $payment_method){
        //if this is a manual payment, we want to store the payment method entered by the admin
        $payment_method_for_db = $payment_method != 'manual' ? $payment_method : $_POST['paymentMethod'];
        $this->set('payment_method', $payment_method_for_db);
        $this->set('client_id', $proposal->client_id);
        $this->payment_description($proposal);
    }

    function complete_payment($proposal, $payment_method, $user_id = null){

        if(!isset($this->payment_date))
            $this->set('payment_date', time());

        //save the payment
        parent::save();

        ActivityManager::payment_created($this, $proposal, $payment_method, $user_id);


        //recalculate the proposal total, which will update the balance, save back to db
        $proposal->calculate_total(true);

        return true;
    }

    function send_payment_notification($proposal, $payment_method, $user_id = null){

        $email = new AppEmail();

        if ($payment_method != 'paypal')
            $client = current_user();
        else {
            $client = new User($user_id);

        }

        $email->send_payment_notifications($client, array(
            'number' => $proposal->number,
            'amount' => $this->amount,
            'client_name' => $client->email
        ));
    }

    function get_client_name(){
        $client_id = $this->proposal->client_id;

        $sql = "SELECT name
                FROM clients
                WHERE id = $client_id";

        $client_name = $this->select($sql);


        return isset($client_name[0]) ? $client_name[0]['name'] : '';
    }

    function is_valid($proposal, $ignore_current_user = false){
        if((float)$proposal->total != (float)$this->amount)
            return false;

        $current_user = current_user();

        if(($proposal->client_id != $current_user->client_id)){
            if($current_user->is('admin') || $ignore_current_user == true)
                return true;
            else return false;
        }
        else return true;
    }

    function payment_description($proposal)
    {

        $user = current_user();
        if(!($user instanceof User) && isset($this->user_id))
            $user = new User($this->user_id);


        //In the format:
        //#102234: $100, Payment made by Joe Smith on Jan 3, 2013, 5:18pm
        $description = Language::get('payment.description', array(
            'proposal_number' => $proposal->number,
            'currency_symbol' => get_config('currency_symbol'),
            'amount' => number_format($this->amount, 2),
            'user_first_name' => $user->first_name,
            'user_last_name' => $user->last_name,
            'date' => date("F j, Y, g:i a")
        ));



        $this->set('description', $description);

    }

    function reference_number(){
        //see:http://stackoverflow.com/questions/178572/what-is-the-best-format-for-a-customer-number-order-number
    }


    function current_user_can_access(){
        $user = current_user();

        if($user->role == 'admin' || $user->client_id == $this->proposal->client_id)
            return true;
        else return false;
    }
}